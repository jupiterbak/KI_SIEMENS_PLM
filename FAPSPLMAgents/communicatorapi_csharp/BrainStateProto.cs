// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: brain_state_proto.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from brain_state_proto.proto</summary>
public static partial class BrainStateProtoReflection {

  #region Descriptor
  /// <summary>File descriptor for brain_state_proto.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static BrainStateProtoReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChdicmFpbl9zdGF0ZV9wcm90by5wcm90byK4AQoPQnJhaW5TdGF0ZVByb3Rv",
          "EhEKCWJyYWluTmFtZRgBIAEoCRITCgtsYXN0X3N0YXRlcxgCIAMoAhIeChZs",
          "YXN0X2FjdGlvbnNfY29udGlub3VzGAMgAygCEh0KFWxhc3RfYWN0aW9uc19k",
          "aXNjcmV0ZRgEIAMoBRIOCgZzdGF0ZXMYBSADKAISDgoGcmV3YXJkGAYgASgC",
          "EhAKCG1lbW9yaWVzGAcgAygFEgwKBGRvbmUYCCABKAViBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::BrainStateProto), global::BrainStateProto.Parser, new[]{ "BrainName", "LastStates", "LastActionsContinous", "LastActionsDiscrete", "States", "Reward", "Memories", "Done" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class BrainStateProto : pb::IMessage<BrainStateProto> {
  private static readonly pb::MessageParser<BrainStateProto> _parser = new pb::MessageParser<BrainStateProto>(() => new BrainStateProto());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BrainStateProto> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::BrainStateProtoReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrainStateProto() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrainStateProto(BrainStateProto other) : this() {
    brainName_ = other.brainName_;
    lastStates_ = other.lastStates_.Clone();
    lastActionsContinous_ = other.lastActionsContinous_.Clone();
    lastActionsDiscrete_ = other.lastActionsDiscrete_.Clone();
    states_ = other.states_.Clone();
    reward_ = other.reward_;
    memories_ = other.memories_.Clone();
    done_ = other.done_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BrainStateProto Clone() {
    return new BrainStateProto(this);
  }

  /// <summary>Field number for the "brainName" field.</summary>
  public const int BrainNameFieldNumber = 1;
  private string brainName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string BrainName {
    get { return brainName_; }
    set {
      brainName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "last_states" field.</summary>
  public const int LastStatesFieldNumber = 2;
  private static readonly pb::FieldCodec<float> _repeated_lastStates_codec
      = pb::FieldCodec.ForFloat(18);
  private readonly pbc::RepeatedField<float> lastStates_ = new pbc::RepeatedField<float>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<float> LastStates {
    get { return lastStates_; }
  }

  /// <summary>Field number for the "last_actions_continous" field.</summary>
  public const int LastActionsContinousFieldNumber = 3;
  private static readonly pb::FieldCodec<float> _repeated_lastActionsContinous_codec
      = pb::FieldCodec.ForFloat(26);
  private readonly pbc::RepeatedField<float> lastActionsContinous_ = new pbc::RepeatedField<float>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<float> LastActionsContinous {
    get { return lastActionsContinous_; }
  }

  /// <summary>Field number for the "last_actions_discrete" field.</summary>
  public const int LastActionsDiscreteFieldNumber = 4;
  private static readonly pb::FieldCodec<int> _repeated_lastActionsDiscrete_codec
      = pb::FieldCodec.ForInt32(34);
  private readonly pbc::RepeatedField<int> lastActionsDiscrete_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> LastActionsDiscrete {
    get { return lastActionsDiscrete_; }
  }

  /// <summary>Field number for the "states" field.</summary>
  public const int StatesFieldNumber = 5;
  private static readonly pb::FieldCodec<float> _repeated_states_codec
      = pb::FieldCodec.ForFloat(42);
  private readonly pbc::RepeatedField<float> states_ = new pbc::RepeatedField<float>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<float> States {
    get { return states_; }
  }

  /// <summary>Field number for the "reward" field.</summary>
  public const int RewardFieldNumber = 6;
  private float reward_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Reward {
    get { return reward_; }
    set {
      reward_ = value;
    }
  }

  /// <summary>Field number for the "memories" field.</summary>
  public const int MemoriesFieldNumber = 7;
  private static readonly pb::FieldCodec<int> _repeated_memories_codec
      = pb::FieldCodec.ForInt32(58);
  private readonly pbc::RepeatedField<int> memories_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Memories {
    get { return memories_; }
  }

  /// <summary>Field number for the "done" field.</summary>
  public const int DoneFieldNumber = 8;
  private int done_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Done {
    get { return done_; }
    set {
      done_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BrainStateProto);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BrainStateProto other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BrainName != other.BrainName) return false;
    if(!lastStates_.Equals(other.lastStates_)) return false;
    if(!lastActionsContinous_.Equals(other.lastActionsContinous_)) return false;
    if(!lastActionsDiscrete_.Equals(other.lastActionsDiscrete_)) return false;
    if(!states_.Equals(other.states_)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Reward, other.Reward)) return false;
    if(!memories_.Equals(other.memories_)) return false;
    if (Done != other.Done) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (BrainName.Length != 0) hash ^= BrainName.GetHashCode();
    hash ^= lastStates_.GetHashCode();
    hash ^= lastActionsContinous_.GetHashCode();
    hash ^= lastActionsDiscrete_.GetHashCode();
    hash ^= states_.GetHashCode();
    if (Reward != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Reward);
    hash ^= memories_.GetHashCode();
    if (Done != 0) hash ^= Done.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (BrainName.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(BrainName);
    }
    lastStates_.WriteTo(output, _repeated_lastStates_codec);
    lastActionsContinous_.WriteTo(output, _repeated_lastActionsContinous_codec);
    lastActionsDiscrete_.WriteTo(output, _repeated_lastActionsDiscrete_codec);
    states_.WriteTo(output, _repeated_states_codec);
    if (Reward != 0F) {
      output.WriteRawTag(53);
      output.WriteFloat(Reward);
    }
    memories_.WriteTo(output, _repeated_memories_codec);
    if (Done != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(Done);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (BrainName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(BrainName);
    }
    size += lastStates_.CalculateSize(_repeated_lastStates_codec);
    size += lastActionsContinous_.CalculateSize(_repeated_lastActionsContinous_codec);
    size += lastActionsDiscrete_.CalculateSize(_repeated_lastActionsDiscrete_codec);
    size += states_.CalculateSize(_repeated_states_codec);
    if (Reward != 0F) {
      size += 1 + 4;
    }
    size += memories_.CalculateSize(_repeated_memories_codec);
    if (Done != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Done);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BrainStateProto other) {
    if (other == null) {
      return;
    }
    if (other.BrainName.Length != 0) {
      BrainName = other.BrainName;
    }
    lastStates_.Add(other.lastStates_);
    lastActionsContinous_.Add(other.lastActionsContinous_);
    lastActionsDiscrete_.Add(other.lastActionsDiscrete_);
    states_.Add(other.states_);
    if (other.Reward != 0F) {
      Reward = other.Reward;
    }
    memories_.Add(other.memories_);
    if (other.Done != 0) {
      Done = other.Done;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          BrainName = input.ReadString();
          break;
        }
        case 18:
        case 21: {
          lastStates_.AddEntriesFrom(input, _repeated_lastStates_codec);
          break;
        }
        case 26:
        case 29: {
          lastActionsContinous_.AddEntriesFrom(input, _repeated_lastActionsContinous_codec);
          break;
        }
        case 34:
        case 32: {
          lastActionsDiscrete_.AddEntriesFrom(input, _repeated_lastActionsDiscrete_codec);
          break;
        }
        case 42:
        case 45: {
          states_.AddEntriesFrom(input, _repeated_states_codec);
          break;
        }
        case 53: {
          Reward = input.ReadFloat();
          break;
        }
        case 58:
        case 56: {
          memories_.AddEntriesFrom(input, _repeated_memories_codec);
          break;
        }
        case 64: {
          Done = input.ReadInt32();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
