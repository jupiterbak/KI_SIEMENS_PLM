// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: FAPSPLMServives.proto
#ifndef GRPC_FAPSPLMServives_2eproto__INCLUDED
#define GRPC_FAPSPLMServives_2eproto__INCLUDED

#include "FAPSPLMServives.pb.h"

#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace communicator_objects {

// The greeting service definition.
class FAPSPLMServices final {
 public:
  static constexpr char const* service_full_name() {
    return "communicator_objects.FAPSPLMServices";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status FAPSAGENT_Initialize(::grpc::ClientContext* context, const ::AcademyConfigProto& request, ::HandleTypeProto* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HandleTypeProto>> AsyncFAPSAGENT_Initialize(::grpc::ClientContext* context, const ::AcademyConfigProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HandleTypeProto>>(AsyncFAPSAGENT_InitializeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HandleTypeProto>> PrepareAsyncFAPSAGENT_Initialize(::grpc::ClientContext* context, const ::AcademyConfigProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HandleTypeProto>>(PrepareAsyncFAPSAGENT_InitializeRaw(context, request, cq));
    }
    virtual ::grpc::Status FAPSAGENT_Clear(::grpc::ClientContext* context, const ::HandleTypeProto& request, ::HandleTypeProto* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HandleTypeProto>> AsyncFAPSAGENT_Clear(::grpc::ClientContext* context, const ::HandleTypeProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HandleTypeProto>>(AsyncFAPSAGENT_ClearRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HandleTypeProto>> PrepareAsyncFAPSAGENT_Clear(::grpc::ClientContext* context, const ::HandleTypeProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HandleTypeProto>>(PrepareAsyncFAPSAGENT_ClearRaw(context, request, cq));
    }
    virtual ::grpc::Status FAPSAGENT_Start(::grpc::ClientContext* context, const ::HandleTypeProto& request, ::HandleTypeProto* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HandleTypeProto>> AsyncFAPSAGENT_Start(::grpc::ClientContext* context, const ::HandleTypeProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HandleTypeProto>>(AsyncFAPSAGENT_StartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HandleTypeProto>> PrepareAsyncFAPSAGENT_Start(::grpc::ClientContext* context, const ::HandleTypeProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HandleTypeProto>>(PrepareAsyncFAPSAGENT_StartRaw(context, request, cq));
    }
    virtual ::grpc::Status FAPSAGENT_Stop(::grpc::ClientContext* context, const ::HandleTypeProto& request, ::HandleTypeProto* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HandleTypeProto>> AsyncFAPSAGENT_Stop(::grpc::ClientContext* context, const ::HandleTypeProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HandleTypeProto>>(AsyncFAPSAGENT_StopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HandleTypeProto>> PrepareAsyncFAPSAGENT_Stop(::grpc::ClientContext* context, const ::HandleTypeProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::HandleTypeProto>>(PrepareAsyncFAPSAGENT_StopRaw(context, request, cq));
    }
    virtual ::grpc::Status FAPSAGENT_getAction(::grpc::ClientContext* context, const ::AcademyStateProto& request, ::AcademyActionProto* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AcademyActionProto>> AsyncFAPSAGENT_getAction(::grpc::ClientContext* context, const ::AcademyStateProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AcademyActionProto>>(AsyncFAPSAGENT_getActionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AcademyActionProto>> PrepareAsyncFAPSAGENT_getAction(::grpc::ClientContext* context, const ::AcademyStateProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AcademyActionProto>>(PrepareAsyncFAPSAGENT_getActionRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HandleTypeProto>* AsyncFAPSAGENT_InitializeRaw(::grpc::ClientContext* context, const ::AcademyConfigProto& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HandleTypeProto>* PrepareAsyncFAPSAGENT_InitializeRaw(::grpc::ClientContext* context, const ::AcademyConfigProto& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HandleTypeProto>* AsyncFAPSAGENT_ClearRaw(::grpc::ClientContext* context, const ::HandleTypeProto& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HandleTypeProto>* PrepareAsyncFAPSAGENT_ClearRaw(::grpc::ClientContext* context, const ::HandleTypeProto& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HandleTypeProto>* AsyncFAPSAGENT_StartRaw(::grpc::ClientContext* context, const ::HandleTypeProto& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HandleTypeProto>* PrepareAsyncFAPSAGENT_StartRaw(::grpc::ClientContext* context, const ::HandleTypeProto& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HandleTypeProto>* AsyncFAPSAGENT_StopRaw(::grpc::ClientContext* context, const ::HandleTypeProto& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::HandleTypeProto>* PrepareAsyncFAPSAGENT_StopRaw(::grpc::ClientContext* context, const ::HandleTypeProto& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AcademyActionProto>* AsyncFAPSAGENT_getActionRaw(::grpc::ClientContext* context, const ::AcademyStateProto& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AcademyActionProto>* PrepareAsyncFAPSAGENT_getActionRaw(::grpc::ClientContext* context, const ::AcademyStateProto& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status FAPSAGENT_Initialize(::grpc::ClientContext* context, const ::AcademyConfigProto& request, ::HandleTypeProto* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HandleTypeProto>> AsyncFAPSAGENT_Initialize(::grpc::ClientContext* context, const ::AcademyConfigProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HandleTypeProto>>(AsyncFAPSAGENT_InitializeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HandleTypeProto>> PrepareAsyncFAPSAGENT_Initialize(::grpc::ClientContext* context, const ::AcademyConfigProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HandleTypeProto>>(PrepareAsyncFAPSAGENT_InitializeRaw(context, request, cq));
    }
    ::grpc::Status FAPSAGENT_Clear(::grpc::ClientContext* context, const ::HandleTypeProto& request, ::HandleTypeProto* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HandleTypeProto>> AsyncFAPSAGENT_Clear(::grpc::ClientContext* context, const ::HandleTypeProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HandleTypeProto>>(AsyncFAPSAGENT_ClearRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HandleTypeProto>> PrepareAsyncFAPSAGENT_Clear(::grpc::ClientContext* context, const ::HandleTypeProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HandleTypeProto>>(PrepareAsyncFAPSAGENT_ClearRaw(context, request, cq));
    }
    ::grpc::Status FAPSAGENT_Start(::grpc::ClientContext* context, const ::HandleTypeProto& request, ::HandleTypeProto* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HandleTypeProto>> AsyncFAPSAGENT_Start(::grpc::ClientContext* context, const ::HandleTypeProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HandleTypeProto>>(AsyncFAPSAGENT_StartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HandleTypeProto>> PrepareAsyncFAPSAGENT_Start(::grpc::ClientContext* context, const ::HandleTypeProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HandleTypeProto>>(PrepareAsyncFAPSAGENT_StartRaw(context, request, cq));
    }
    ::grpc::Status FAPSAGENT_Stop(::grpc::ClientContext* context, const ::HandleTypeProto& request, ::HandleTypeProto* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HandleTypeProto>> AsyncFAPSAGENT_Stop(::grpc::ClientContext* context, const ::HandleTypeProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HandleTypeProto>>(AsyncFAPSAGENT_StopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HandleTypeProto>> PrepareAsyncFAPSAGENT_Stop(::grpc::ClientContext* context, const ::HandleTypeProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::HandleTypeProto>>(PrepareAsyncFAPSAGENT_StopRaw(context, request, cq));
    }
    ::grpc::Status FAPSAGENT_getAction(::grpc::ClientContext* context, const ::AcademyStateProto& request, ::AcademyActionProto* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AcademyActionProto>> AsyncFAPSAGENT_getAction(::grpc::ClientContext* context, const ::AcademyStateProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AcademyActionProto>>(AsyncFAPSAGENT_getActionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AcademyActionProto>> PrepareAsyncFAPSAGENT_getAction(::grpc::ClientContext* context, const ::AcademyStateProto& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AcademyActionProto>>(PrepareAsyncFAPSAGENT_getActionRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::HandleTypeProto>* AsyncFAPSAGENT_InitializeRaw(::grpc::ClientContext* context, const ::AcademyConfigProto& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HandleTypeProto>* PrepareAsyncFAPSAGENT_InitializeRaw(::grpc::ClientContext* context, const ::AcademyConfigProto& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HandleTypeProto>* AsyncFAPSAGENT_ClearRaw(::grpc::ClientContext* context, const ::HandleTypeProto& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HandleTypeProto>* PrepareAsyncFAPSAGENT_ClearRaw(::grpc::ClientContext* context, const ::HandleTypeProto& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HandleTypeProto>* AsyncFAPSAGENT_StartRaw(::grpc::ClientContext* context, const ::HandleTypeProto& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HandleTypeProto>* PrepareAsyncFAPSAGENT_StartRaw(::grpc::ClientContext* context, const ::HandleTypeProto& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HandleTypeProto>* AsyncFAPSAGENT_StopRaw(::grpc::ClientContext* context, const ::HandleTypeProto& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::HandleTypeProto>* PrepareAsyncFAPSAGENT_StopRaw(::grpc::ClientContext* context, const ::HandleTypeProto& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AcademyActionProto>* AsyncFAPSAGENT_getActionRaw(::grpc::ClientContext* context, const ::AcademyStateProto& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AcademyActionProto>* PrepareAsyncFAPSAGENT_getActionRaw(::grpc::ClientContext* context, const ::AcademyStateProto& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_FAPSAGENT_Initialize_;
    const ::grpc::internal::RpcMethod rpcmethod_FAPSAGENT_Clear_;
    const ::grpc::internal::RpcMethod rpcmethod_FAPSAGENT_Start_;
    const ::grpc::internal::RpcMethod rpcmethod_FAPSAGENT_Stop_;
    const ::grpc::internal::RpcMethod rpcmethod_FAPSAGENT_getAction_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status FAPSAGENT_Initialize(::grpc::ServerContext* context, const ::AcademyConfigProto* request, ::HandleTypeProto* response);
    virtual ::grpc::Status FAPSAGENT_Clear(::grpc::ServerContext* context, const ::HandleTypeProto* request, ::HandleTypeProto* response);
    virtual ::grpc::Status FAPSAGENT_Start(::grpc::ServerContext* context, const ::HandleTypeProto* request, ::HandleTypeProto* response);
    virtual ::grpc::Status FAPSAGENT_Stop(::grpc::ServerContext* context, const ::HandleTypeProto* request, ::HandleTypeProto* response);
    virtual ::grpc::Status FAPSAGENT_getAction(::grpc::ServerContext* context, const ::AcademyStateProto* request, ::AcademyActionProto* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_FAPSAGENT_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_FAPSAGENT_Initialize() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_FAPSAGENT_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FAPSAGENT_Initialize(::grpc::ServerContext* context, const ::AcademyConfigProto* request, ::HandleTypeProto* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFAPSAGENT_Initialize(::grpc::ServerContext* context, ::AcademyConfigProto* request, ::grpc::ServerAsyncResponseWriter< ::HandleTypeProto>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FAPSAGENT_Clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_FAPSAGENT_Clear() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_FAPSAGENT_Clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FAPSAGENT_Clear(::grpc::ServerContext* context, const ::HandleTypeProto* request, ::HandleTypeProto* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFAPSAGENT_Clear(::grpc::ServerContext* context, ::HandleTypeProto* request, ::grpc::ServerAsyncResponseWriter< ::HandleTypeProto>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FAPSAGENT_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_FAPSAGENT_Start() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_FAPSAGENT_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FAPSAGENT_Start(::grpc::ServerContext* context, const ::HandleTypeProto* request, ::HandleTypeProto* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFAPSAGENT_Start(::grpc::ServerContext* context, ::HandleTypeProto* request, ::grpc::ServerAsyncResponseWriter< ::HandleTypeProto>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FAPSAGENT_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_FAPSAGENT_Stop() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_FAPSAGENT_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FAPSAGENT_Stop(::grpc::ServerContext* context, const ::HandleTypeProto* request, ::HandleTypeProto* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFAPSAGENT_Stop(::grpc::ServerContext* context, ::HandleTypeProto* request, ::grpc::ServerAsyncResponseWriter< ::HandleTypeProto>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FAPSAGENT_getAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_FAPSAGENT_getAction() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_FAPSAGENT_getAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FAPSAGENT_getAction(::grpc::ServerContext* context, const ::AcademyStateProto* request, ::AcademyActionProto* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFAPSAGENT_getAction(::grpc::ServerContext* context, ::AcademyStateProto* request, ::grpc::ServerAsyncResponseWriter< ::AcademyActionProto>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_FAPSAGENT_Initialize<WithAsyncMethod_FAPSAGENT_Clear<WithAsyncMethod_FAPSAGENT_Start<WithAsyncMethod_FAPSAGENT_Stop<WithAsyncMethod_FAPSAGENT_getAction<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_FAPSAGENT_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_FAPSAGENT_Initialize() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_FAPSAGENT_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FAPSAGENT_Initialize(::grpc::ServerContext* context, const ::AcademyConfigProto* request, ::HandleTypeProto* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FAPSAGENT_Clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_FAPSAGENT_Clear() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_FAPSAGENT_Clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FAPSAGENT_Clear(::grpc::ServerContext* context, const ::HandleTypeProto* request, ::HandleTypeProto* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FAPSAGENT_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_FAPSAGENT_Start() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_FAPSAGENT_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FAPSAGENT_Start(::grpc::ServerContext* context, const ::HandleTypeProto* request, ::HandleTypeProto* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FAPSAGENT_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_FAPSAGENT_Stop() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_FAPSAGENT_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FAPSAGENT_Stop(::grpc::ServerContext* context, const ::HandleTypeProto* request, ::HandleTypeProto* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FAPSAGENT_getAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_FAPSAGENT_getAction() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_FAPSAGENT_getAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FAPSAGENT_getAction(::grpc::ServerContext* context, const ::AcademyStateProto* request, ::AcademyActionProto* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_FAPSAGENT_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_FAPSAGENT_Initialize() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_FAPSAGENT_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FAPSAGENT_Initialize(::grpc::ServerContext* context, const ::AcademyConfigProto* request, ::HandleTypeProto* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFAPSAGENT_Initialize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FAPSAGENT_Clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_FAPSAGENT_Clear() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_FAPSAGENT_Clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FAPSAGENT_Clear(::grpc::ServerContext* context, const ::HandleTypeProto* request, ::HandleTypeProto* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFAPSAGENT_Clear(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FAPSAGENT_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_FAPSAGENT_Start() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_FAPSAGENT_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FAPSAGENT_Start(::grpc::ServerContext* context, const ::HandleTypeProto* request, ::HandleTypeProto* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFAPSAGENT_Start(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FAPSAGENT_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_FAPSAGENT_Stop() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_FAPSAGENT_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FAPSAGENT_Stop(::grpc::ServerContext* context, const ::HandleTypeProto* request, ::HandleTypeProto* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFAPSAGENT_Stop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FAPSAGENT_getAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_FAPSAGENT_getAction() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_FAPSAGENT_getAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FAPSAGENT_getAction(::grpc::ServerContext* context, const ::AcademyStateProto* request, ::AcademyActionProto* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFAPSAGENT_getAction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FAPSAGENT_Initialize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_FAPSAGENT_Initialize() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::AcademyConfigProto, ::HandleTypeProto>(std::bind(&WithStreamedUnaryMethod_FAPSAGENT_Initialize<BaseClass>::StreamedFAPSAGENT_Initialize, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_FAPSAGENT_Initialize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FAPSAGENT_Initialize(::grpc::ServerContext* context, const ::AcademyConfigProto* request, ::HandleTypeProto* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFAPSAGENT_Initialize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::AcademyConfigProto,::HandleTypeProto>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FAPSAGENT_Clear : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_FAPSAGENT_Clear() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::HandleTypeProto, ::HandleTypeProto>(std::bind(&WithStreamedUnaryMethod_FAPSAGENT_Clear<BaseClass>::StreamedFAPSAGENT_Clear, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_FAPSAGENT_Clear() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FAPSAGENT_Clear(::grpc::ServerContext* context, const ::HandleTypeProto* request, ::HandleTypeProto* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFAPSAGENT_Clear(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::HandleTypeProto,::HandleTypeProto>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FAPSAGENT_Start : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_FAPSAGENT_Start() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::HandleTypeProto, ::HandleTypeProto>(std::bind(&WithStreamedUnaryMethod_FAPSAGENT_Start<BaseClass>::StreamedFAPSAGENT_Start, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_FAPSAGENT_Start() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FAPSAGENT_Start(::grpc::ServerContext* context, const ::HandleTypeProto* request, ::HandleTypeProto* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFAPSAGENT_Start(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::HandleTypeProto,::HandleTypeProto>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FAPSAGENT_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_FAPSAGENT_Stop() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::HandleTypeProto, ::HandleTypeProto>(std::bind(&WithStreamedUnaryMethod_FAPSAGENT_Stop<BaseClass>::StreamedFAPSAGENT_Stop, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_FAPSAGENT_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FAPSAGENT_Stop(::grpc::ServerContext* context, const ::HandleTypeProto* request, ::HandleTypeProto* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFAPSAGENT_Stop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::HandleTypeProto,::HandleTypeProto>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FAPSAGENT_getAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_FAPSAGENT_getAction() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::AcademyStateProto, ::AcademyActionProto>(std::bind(&WithStreamedUnaryMethod_FAPSAGENT_getAction<BaseClass>::StreamedFAPSAGENT_getAction, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_FAPSAGENT_getAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FAPSAGENT_getAction(::grpc::ServerContext* context, const ::AcademyStateProto* request, ::AcademyActionProto* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFAPSAGENT_getAction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::AcademyStateProto,::AcademyActionProto>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_FAPSAGENT_Initialize<WithStreamedUnaryMethod_FAPSAGENT_Clear<WithStreamedUnaryMethod_FAPSAGENT_Start<WithStreamedUnaryMethod_FAPSAGENT_Stop<WithStreamedUnaryMethod_FAPSAGENT_getAction<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_FAPSAGENT_Initialize<WithStreamedUnaryMethod_FAPSAGENT_Clear<WithStreamedUnaryMethod_FAPSAGENT_Start<WithStreamedUnaryMethod_FAPSAGENT_Stop<WithStreamedUnaryMethod_FAPSAGENT_getAction<Service > > > > > StreamedService;
};

}  // namespace communicator_objects


#endif  // GRPC_FAPSPLMServives_2eproto__INCLUDED
