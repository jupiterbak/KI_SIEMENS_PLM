// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: brain_state_proto.proto

#ifndef PROTOBUF_INCLUDED_brain_5fstate_5fproto_2eproto
#define PROTOBUF_INCLUDED_brain_5fstate_5fproto_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_brain_5fstate_5fproto_2eproto 

namespace protobuf_brain_5fstate_5fproto_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_brain_5fstate_5fproto_2eproto
class BrainStateProto;
class BrainStateProtoDefaultTypeInternal;
extern BrainStateProtoDefaultTypeInternal _BrainStateProto_default_instance_;
namespace google {
namespace protobuf {
template<> ::BrainStateProto* Arena::CreateMaybeMessage<::BrainStateProto>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class BrainStateProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BrainStateProto) */ {
 public:
  BrainStateProto();
  virtual ~BrainStateProto();

  BrainStateProto(const BrainStateProto& from);

  inline BrainStateProto& operator=(const BrainStateProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BrainStateProto(BrainStateProto&& from) noexcept
    : BrainStateProto() {
    *this = ::std::move(from);
  }

  inline BrainStateProto& operator=(BrainStateProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BrainStateProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BrainStateProto* internal_default_instance() {
    return reinterpret_cast<const BrainStateProto*>(
               &_BrainStateProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(BrainStateProto* other);
  friend void swap(BrainStateProto& a, BrainStateProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BrainStateProto* New() const final {
    return CreateMaybeMessage<BrainStateProto>(NULL);
  }

  BrainStateProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BrainStateProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BrainStateProto& from);
  void MergeFrom(const BrainStateProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrainStateProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float states = 2;
  int states_size() const;
  void clear_states();
  static const int kStatesFieldNumber = 2;
  float states(int index) const;
  void set_states(int index, float value);
  void add_states(float value);
  const ::google::protobuf::RepeatedField< float >&
      states() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_states();

  // repeated float rewards = 3;
  int rewards_size() const;
  void clear_rewards();
  static const int kRewardsFieldNumber = 3;
  float rewards(int index) const;
  void set_rewards(int index, float value);
  void add_rewards(float value);
  const ::google::protobuf::RepeatedField< float >&
      rewards() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_rewards();

  // repeated float last_actions_continous = 4;
  int last_actions_continous_size() const;
  void clear_last_actions_continous();
  static const int kLastActionsContinousFieldNumber = 4;
  float last_actions_continous(int index) const;
  void set_last_actions_continous(int index, float value);
  void add_last_actions_continous(float value);
  const ::google::protobuf::RepeatedField< float >&
      last_actions_continous() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_last_actions_continous();

  // repeated int32 last_actions_discrete = 5;
  int last_actions_discrete_size() const;
  void clear_last_actions_discrete();
  static const int kLastActionsDiscreteFieldNumber = 5;
  ::google::protobuf::int32 last_actions_discrete(int index) const;
  void set_last_actions_discrete(int index, ::google::protobuf::int32 value);
  void add_last_actions_discrete(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      last_actions_discrete() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_last_actions_discrete();

  // repeated int32 memories = 6;
  int memories_size() const;
  void clear_memories();
  static const int kMemoriesFieldNumber = 6;
  ::google::protobuf::int32 memories(int index) const;
  void set_memories(int index, ::google::protobuf::int32 value);
  void add_memories(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      memories() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_memories();

  // repeated int32 dones = 7;
  int dones_size() const;
  void clear_dones();
  static const int kDonesFieldNumber = 7;
  ::google::protobuf::int32 dones(int index) const;
  void set_dones(int index, ::google::protobuf::int32 value);
  void add_dones(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      dones() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_dones();

  // string brainName = 1;
  void clear_brainname();
  static const int kBrainNameFieldNumber = 1;
  const ::std::string& brainname() const;
  void set_brainname(const ::std::string& value);
  #if LANG_CXX11
  void set_brainname(::std::string&& value);
  #endif
  void set_brainname(const char* value);
  void set_brainname(const char* value, size_t size);
  ::std::string* mutable_brainname();
  ::std::string* release_brainname();
  void set_allocated_brainname(::std::string* brainname);

  // @@protoc_insertion_point(class_scope:BrainStateProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > states_;
  mutable int _states_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > rewards_;
  mutable int _rewards_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > last_actions_continous_;
  mutable int _last_actions_continous_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > last_actions_discrete_;
  mutable int _last_actions_discrete_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > memories_;
  mutable int _memories_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > dones_;
  mutable int _dones_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr brainname_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_brain_5fstate_5fproto_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BrainStateProto

// string brainName = 1;
inline void BrainStateProto::clear_brainname() {
  brainname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BrainStateProto::brainname() const {
  // @@protoc_insertion_point(field_get:BrainStateProto.brainName)
  return brainname_.GetNoArena();
}
inline void BrainStateProto::set_brainname(const ::std::string& value) {
  
  brainname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BrainStateProto.brainName)
}
#if LANG_CXX11
inline void BrainStateProto::set_brainname(::std::string&& value) {
  
  brainname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BrainStateProto.brainName)
}
#endif
inline void BrainStateProto::set_brainname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  brainname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BrainStateProto.brainName)
}
inline void BrainStateProto::set_brainname(const char* value, size_t size) {
  
  brainname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BrainStateProto.brainName)
}
inline ::std::string* BrainStateProto::mutable_brainname() {
  
  // @@protoc_insertion_point(field_mutable:BrainStateProto.brainName)
  return brainname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BrainStateProto::release_brainname() {
  // @@protoc_insertion_point(field_release:BrainStateProto.brainName)
  
  return brainname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BrainStateProto::set_allocated_brainname(::std::string* brainname) {
  if (brainname != NULL) {
    
  } else {
    
  }
  brainname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), brainname);
  // @@protoc_insertion_point(field_set_allocated:BrainStateProto.brainName)
}

// repeated float states = 2;
inline int BrainStateProto::states_size() const {
  return states_.size();
}
inline void BrainStateProto::clear_states() {
  states_.Clear();
}
inline float BrainStateProto::states(int index) const {
  // @@protoc_insertion_point(field_get:BrainStateProto.states)
  return states_.Get(index);
}
inline void BrainStateProto::set_states(int index, float value) {
  states_.Set(index, value);
  // @@protoc_insertion_point(field_set:BrainStateProto.states)
}
inline void BrainStateProto::add_states(float value) {
  states_.Add(value);
  // @@protoc_insertion_point(field_add:BrainStateProto.states)
}
inline const ::google::protobuf::RepeatedField< float >&
BrainStateProto::states() const {
  // @@protoc_insertion_point(field_list:BrainStateProto.states)
  return states_;
}
inline ::google::protobuf::RepeatedField< float >*
BrainStateProto::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:BrainStateProto.states)
  return &states_;
}

// repeated float rewards = 3;
inline int BrainStateProto::rewards_size() const {
  return rewards_.size();
}
inline void BrainStateProto::clear_rewards() {
  rewards_.Clear();
}
inline float BrainStateProto::rewards(int index) const {
  // @@protoc_insertion_point(field_get:BrainStateProto.rewards)
  return rewards_.Get(index);
}
inline void BrainStateProto::set_rewards(int index, float value) {
  rewards_.Set(index, value);
  // @@protoc_insertion_point(field_set:BrainStateProto.rewards)
}
inline void BrainStateProto::add_rewards(float value) {
  rewards_.Add(value);
  // @@protoc_insertion_point(field_add:BrainStateProto.rewards)
}
inline const ::google::protobuf::RepeatedField< float >&
BrainStateProto::rewards() const {
  // @@protoc_insertion_point(field_list:BrainStateProto.rewards)
  return rewards_;
}
inline ::google::protobuf::RepeatedField< float >*
BrainStateProto::mutable_rewards() {
  // @@protoc_insertion_point(field_mutable_list:BrainStateProto.rewards)
  return &rewards_;
}

// repeated float last_actions_continous = 4;
inline int BrainStateProto::last_actions_continous_size() const {
  return last_actions_continous_.size();
}
inline void BrainStateProto::clear_last_actions_continous() {
  last_actions_continous_.Clear();
}
inline float BrainStateProto::last_actions_continous(int index) const {
  // @@protoc_insertion_point(field_get:BrainStateProto.last_actions_continous)
  return last_actions_continous_.Get(index);
}
inline void BrainStateProto::set_last_actions_continous(int index, float value) {
  last_actions_continous_.Set(index, value);
  // @@protoc_insertion_point(field_set:BrainStateProto.last_actions_continous)
}
inline void BrainStateProto::add_last_actions_continous(float value) {
  last_actions_continous_.Add(value);
  // @@protoc_insertion_point(field_add:BrainStateProto.last_actions_continous)
}
inline const ::google::protobuf::RepeatedField< float >&
BrainStateProto::last_actions_continous() const {
  // @@protoc_insertion_point(field_list:BrainStateProto.last_actions_continous)
  return last_actions_continous_;
}
inline ::google::protobuf::RepeatedField< float >*
BrainStateProto::mutable_last_actions_continous() {
  // @@protoc_insertion_point(field_mutable_list:BrainStateProto.last_actions_continous)
  return &last_actions_continous_;
}

// repeated int32 last_actions_discrete = 5;
inline int BrainStateProto::last_actions_discrete_size() const {
  return last_actions_discrete_.size();
}
inline void BrainStateProto::clear_last_actions_discrete() {
  last_actions_discrete_.Clear();
}
inline ::google::protobuf::int32 BrainStateProto::last_actions_discrete(int index) const {
  // @@protoc_insertion_point(field_get:BrainStateProto.last_actions_discrete)
  return last_actions_discrete_.Get(index);
}
inline void BrainStateProto::set_last_actions_discrete(int index, ::google::protobuf::int32 value) {
  last_actions_discrete_.Set(index, value);
  // @@protoc_insertion_point(field_set:BrainStateProto.last_actions_discrete)
}
inline void BrainStateProto::add_last_actions_discrete(::google::protobuf::int32 value) {
  last_actions_discrete_.Add(value);
  // @@protoc_insertion_point(field_add:BrainStateProto.last_actions_discrete)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BrainStateProto::last_actions_discrete() const {
  // @@protoc_insertion_point(field_list:BrainStateProto.last_actions_discrete)
  return last_actions_discrete_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BrainStateProto::mutable_last_actions_discrete() {
  // @@protoc_insertion_point(field_mutable_list:BrainStateProto.last_actions_discrete)
  return &last_actions_discrete_;
}

// repeated int32 memories = 6;
inline int BrainStateProto::memories_size() const {
  return memories_.size();
}
inline void BrainStateProto::clear_memories() {
  memories_.Clear();
}
inline ::google::protobuf::int32 BrainStateProto::memories(int index) const {
  // @@protoc_insertion_point(field_get:BrainStateProto.memories)
  return memories_.Get(index);
}
inline void BrainStateProto::set_memories(int index, ::google::protobuf::int32 value) {
  memories_.Set(index, value);
  // @@protoc_insertion_point(field_set:BrainStateProto.memories)
}
inline void BrainStateProto::add_memories(::google::protobuf::int32 value) {
  memories_.Add(value);
  // @@protoc_insertion_point(field_add:BrainStateProto.memories)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BrainStateProto::memories() const {
  // @@protoc_insertion_point(field_list:BrainStateProto.memories)
  return memories_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BrainStateProto::mutable_memories() {
  // @@protoc_insertion_point(field_mutable_list:BrainStateProto.memories)
  return &memories_;
}

// repeated int32 dones = 7;
inline int BrainStateProto::dones_size() const {
  return dones_.size();
}
inline void BrainStateProto::clear_dones() {
  dones_.Clear();
}
inline ::google::protobuf::int32 BrainStateProto::dones(int index) const {
  // @@protoc_insertion_point(field_get:BrainStateProto.dones)
  return dones_.Get(index);
}
inline void BrainStateProto::set_dones(int index, ::google::protobuf::int32 value) {
  dones_.Set(index, value);
  // @@protoc_insertion_point(field_set:BrainStateProto.dones)
}
inline void BrainStateProto::add_dones(::google::protobuf::int32 value) {
  dones_.Add(value);
  // @@protoc_insertion_point(field_add:BrainStateProto.dones)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BrainStateProto::dones() const {
  // @@protoc_insertion_point(field_list:BrainStateProto.dones)
  return dones_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BrainStateProto::mutable_dones() {
  // @@protoc_insertion_point(field_mutable_list:BrainStateProto.dones)
  return &dones_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_brain_5fstate_5fproto_2eproto
