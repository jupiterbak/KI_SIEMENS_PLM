// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: FAPSPLMServives.proto

#include "FAPSPLMServives.pb.h"
#include "FAPSPLMServives.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace communicator_objects {

static const char* FAPSPLMServices_method_names[] = {
  "/communicator_objects.FAPSPLMServices/FAPSAGENT_Initialize",
  "/communicator_objects.FAPSPLMServices/FAPSAGENT_Clear",
  "/communicator_objects.FAPSPLMServices/FAPSAGENT_Start",
  "/communicator_objects.FAPSPLMServices/FAPSAGENT_Stop",
  "/communicator_objects.FAPSPLMServices/FAPSAGENT_getAction",
};

std::unique_ptr< FAPSPLMServices::Stub> FAPSPLMServices::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FAPSPLMServices::Stub> stub(new FAPSPLMServices::Stub(channel));
  return stub;
}

FAPSPLMServices::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_FAPSAGENT_Initialize_(FAPSPLMServices_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FAPSAGENT_Clear_(FAPSPLMServices_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FAPSAGENT_Start_(FAPSPLMServices_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FAPSAGENT_Stop_(FAPSPLMServices_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FAPSAGENT_getAction_(FAPSPLMServices_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FAPSPLMServices::Stub::FAPSAGENT_Initialize(::grpc::ClientContext* context, const ::AcademyConfigProto& request, ::HandleTypeProto* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_FAPSAGENT_Initialize_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::HandleTypeProto>* FAPSPLMServices::Stub::AsyncFAPSAGENT_InitializeRaw(::grpc::ClientContext* context, const ::AcademyConfigProto& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::HandleTypeProto>::Create(channel_.get(), cq, rpcmethod_FAPSAGENT_Initialize_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::HandleTypeProto>* FAPSPLMServices::Stub::PrepareAsyncFAPSAGENT_InitializeRaw(::grpc::ClientContext* context, const ::AcademyConfigProto& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::HandleTypeProto>::Create(channel_.get(), cq, rpcmethod_FAPSAGENT_Initialize_, context, request, false);
}

::grpc::Status FAPSPLMServices::Stub::FAPSAGENT_Clear(::grpc::ClientContext* context, const ::HandleTypeProto& request, ::HandleTypeProto* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_FAPSAGENT_Clear_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::HandleTypeProto>* FAPSPLMServices::Stub::AsyncFAPSAGENT_ClearRaw(::grpc::ClientContext* context, const ::HandleTypeProto& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::HandleTypeProto>::Create(channel_.get(), cq, rpcmethod_FAPSAGENT_Clear_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::HandleTypeProto>* FAPSPLMServices::Stub::PrepareAsyncFAPSAGENT_ClearRaw(::grpc::ClientContext* context, const ::HandleTypeProto& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::HandleTypeProto>::Create(channel_.get(), cq, rpcmethod_FAPSAGENT_Clear_, context, request, false);
}

::grpc::Status FAPSPLMServices::Stub::FAPSAGENT_Start(::grpc::ClientContext* context, const ::HandleTypeProto& request, ::HandleTypeProto* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_FAPSAGENT_Start_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::HandleTypeProto>* FAPSPLMServices::Stub::AsyncFAPSAGENT_StartRaw(::grpc::ClientContext* context, const ::HandleTypeProto& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::HandleTypeProto>::Create(channel_.get(), cq, rpcmethod_FAPSAGENT_Start_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::HandleTypeProto>* FAPSPLMServices::Stub::PrepareAsyncFAPSAGENT_StartRaw(::grpc::ClientContext* context, const ::HandleTypeProto& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::HandleTypeProto>::Create(channel_.get(), cq, rpcmethod_FAPSAGENT_Start_, context, request, false);
}

::grpc::Status FAPSPLMServices::Stub::FAPSAGENT_Stop(::grpc::ClientContext* context, const ::HandleTypeProto& request, ::HandleTypeProto* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_FAPSAGENT_Stop_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::HandleTypeProto>* FAPSPLMServices::Stub::AsyncFAPSAGENT_StopRaw(::grpc::ClientContext* context, const ::HandleTypeProto& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::HandleTypeProto>::Create(channel_.get(), cq, rpcmethod_FAPSAGENT_Stop_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::HandleTypeProto>* FAPSPLMServices::Stub::PrepareAsyncFAPSAGENT_StopRaw(::grpc::ClientContext* context, const ::HandleTypeProto& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::HandleTypeProto>::Create(channel_.get(), cq, rpcmethod_FAPSAGENT_Stop_, context, request, false);
}

::grpc::Status FAPSPLMServices::Stub::FAPSAGENT_getAction(::grpc::ClientContext* context, const ::AcademyStateProto& request, ::AcademyActionProto* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_FAPSAGENT_getAction_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::AcademyActionProto>* FAPSPLMServices::Stub::AsyncFAPSAGENT_getActionRaw(::grpc::ClientContext* context, const ::AcademyStateProto& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::AcademyActionProto>::Create(channel_.get(), cq, rpcmethod_FAPSAGENT_getAction_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::AcademyActionProto>* FAPSPLMServices::Stub::PrepareAsyncFAPSAGENT_getActionRaw(::grpc::ClientContext* context, const ::AcademyStateProto& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::AcademyActionProto>::Create(channel_.get(), cq, rpcmethod_FAPSAGENT_getAction_, context, request, false);
}

FAPSPLMServices::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FAPSPLMServices_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FAPSPLMServices::Service, ::AcademyConfigProto, ::HandleTypeProto>(
          std::mem_fn(&FAPSPLMServices::Service::FAPSAGENT_Initialize), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FAPSPLMServices_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FAPSPLMServices::Service, ::HandleTypeProto, ::HandleTypeProto>(
          std::mem_fn(&FAPSPLMServices::Service::FAPSAGENT_Clear), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FAPSPLMServices_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FAPSPLMServices::Service, ::HandleTypeProto, ::HandleTypeProto>(
          std::mem_fn(&FAPSPLMServices::Service::FAPSAGENT_Start), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FAPSPLMServices_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FAPSPLMServices::Service, ::HandleTypeProto, ::HandleTypeProto>(
          std::mem_fn(&FAPSPLMServices::Service::FAPSAGENT_Stop), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FAPSPLMServices_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FAPSPLMServices::Service, ::AcademyStateProto, ::AcademyActionProto>(
          std::mem_fn(&FAPSPLMServices::Service::FAPSAGENT_getAction), this)));
}

FAPSPLMServices::Service::~Service() {
}

::grpc::Status FAPSPLMServices::Service::FAPSAGENT_Initialize(::grpc::ServerContext* context, const ::AcademyConfigProto* request, ::HandleTypeProto* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FAPSPLMServices::Service::FAPSAGENT_Clear(::grpc::ServerContext* context, const ::HandleTypeProto* request, ::HandleTypeProto* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FAPSPLMServices::Service::FAPSAGENT_Start(::grpc::ServerContext* context, const ::HandleTypeProto* request, ::HandleTypeProto* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FAPSPLMServices::Service::FAPSAGENT_Stop(::grpc::ServerContext* context, const ::HandleTypeProto* request, ::HandleTypeProto* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FAPSPLMServices::Service::FAPSAGENT_getAction(::grpc::ServerContext* context, const ::AcademyStateProto* request, ::AcademyActionProto* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace communicator_objects

